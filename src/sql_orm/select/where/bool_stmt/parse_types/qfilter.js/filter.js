//pass in user filter object???
/*
    types are: in, date, like, equals, quick_filter, server_query, greater_equal, greater, less, less_equal

    in: the in flag is meant to create a statement like id in (1,2,3,4,5). the value should be a list of values
    date: the date field expects the value object to be {'before_date': '2020-11-01', 'after_date':'1999-01-01'}
        the date value is in YYYY-MM-DD format. Either or both before_date and after_date can be present. 
        the output statement will look like "effective_date >=  '1999-01-01' and effective_date <=  '2020-11-01'
    like: uses the like operater 'columnName like value or value like columnName'
    equals: checks 'columnName = value'
    quick_filter: this is similar to the like clause, but all columns names in the columnMap are concatenated together
        so that the quick_filter value is compared against all columns in a row.

    greater, greater_equal, less, less_equal, equal: used to compare numerical values. creates bool statement like 'columnName < value'

    server_query: this is a query string generated by the server. If variable_name and value are not null they are added
        to the replacements object. the string is in the query_string object in the where rows.

*/

function WhereQuickFilter(where_statement,  where_list, replacementObject, quickFilterColumnString) {
    //loops through all values in variableValue and compares against columns in quickFilterColumnString
    var variable_value = where_statement['value'] //this will contain the like values as a list.
    var processedVariableValue = TypeCastValues(variable_value, 'string' )
    //if variableValue empty, null, undefined or '', skip?
    if (IsEmptyStatement(processedVariableValue)) {return }
    //convert to array if single value
    if (! Array.isArray(processedVariableValue)) { 
        processedVariableValue = [processedVariableValue]
        if (! Array.isArray(processedVariableValue)) { return }    
    }

    if (processedVariableValue.length == 0) {return}

    var likeJoinList = []
    var i = 0
    // console.log(processedVariableValue)
    for (varx of processedVariableValue) {
        varx = varx.trim()
        if (varx == '') { continue }
        var repName = "quick_sort_" + String(i)
        replacementObject[repName] = '%'+varx+'%'
        likeJoinList.push(`${quickFilterColumnString} ilike :${repName}`  )
        i+=1
    }
    if (likeJoinList.length > 0) {
        var like_string = likeJoinList.join(' OR ')
        var boolean_string = ` ( ${like_string}  ) `
        where_list.push(boolean_string)
    }
}